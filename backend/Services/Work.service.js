import * as Utils from '../Utils/index.js';
import workModel from '../Models/Work.model.js';

// ch·ª©c nƒÉng danh s√°ch c√¥ng vi·ªác
export const getAllWork = async (id, data) => {
    try {
        const page = Number(data.page) || 1;
        const pageSize = Number(data.pageSize) || 5;

        // ph√¢n trang
        const skip = (page - 1) * pageSize;
        const limit = pageSize;

        // ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
        const conditions = { idUser: id };
        if (data.name) conditions.name = new RegExp(data.name, 'i');
        if (data.status) conditions.status = data.status;

        // t√¨m d·ªØ li·ªáu v√† ƒë·∫øm t·ªïng s·ªë b·∫£n ghi
        const [dataa, total] = await Promise.all([
            workModel.find(conditions, { _id: 0 }).sort({ status: 1 }).skip(skip).limit(limit).lean(),
            workModel.countDocuments(conditions)
        ]);

        return Utils.success('Get data success', { data: dataa, total });
    } catch (error) {
        console.log("üöÄ ~ getAllWork ~ error:", error)
        return Utils.error(error.message);
    }
};

// ch·ª©c nƒÉng xem chi ti·∫øt c√¥ng vi·ªác
export const getDetailWork = async (id, idUser) => {
    try {
        // ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!id) {
            return Utils.error('Missing id', 400);
        }

        // t√¨m ki·∫øm d·ªØ li·ªáu
        const data = await workModel.findOne({ idUser: idUser, id: id }, { _id: 0 }).lean();
        if (!data) {
            return Utils.error('Not found Work', 404);
        }

        return Utils.success('Get data success', { data });
    } catch (error) {
        return Utils.error(error.message);
    }
};

// t·∫°o m·ªõi c√¥ng vi·ªác
export const createNewWork = async (data, idUser) => {
    try {
        // ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        const checkMissing = Utils.checkMissing(data, ['name', 'time'])
        if (checkMissing.result === false) {
            return checkMissing;
        }

        // ki·ªÉm tra th·ªùi gian h·ª£p l·ªá
        const checkTime = Utils.checkTime(data.time);
        if (checkTime.result === false) {
            return checkTime;
        }

        // l·∫•y id 
        const id = await Utils.getMaxId(workModel, 'id');

        // l∆∞u v√†o csdl
        const dataCreate = await workModel.create({ id, idUser: idUser, name: data.name, time: new Date(data.time).getTime(), status: 0 })

        return Utils.success('Create work success', { data: dataCreate });
    } catch (error) {
        console.log("üöÄ ~ createNewWork ~ error:", error)
        return Utils.error(error.message);
    }
};

// s·ª≠a c√¥ng vi·ªác
export const updateWork = async (data, idUser) => {
    try {
        // ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        const checkMissing = Utils.checkMissing(data, ['name', 'time', 'status'])
        if (checkMissing.result === false) {
            return checkMissing;
        }

        // ki·ªÉm tra th·ªùi gian h·ª£p l·ªá
        const checkTime = Utils.checkTime(data.time);
        if (checkTime.result === false) {
            return checkTime;
        }
        
        // l∆∞u v√†o csdl
        const dataUpdate = await workModel.findOneAndUpdate({ id: data.id, idUser }, { name: data.name, time: new Date(data.time).getTime(), status: data.status });

        // x·ª≠ l√Ω l·ªói
        if (!dataUpdate) {
            return Utils.error('Not found Work', 404);
        }

        return Utils.success('Update work success', { data: dataUpdate });
    } catch (error) {
        console.log("üöÄ ~ updateWork ~ error:", error)
        return Utils.error(error.message);
    }
};

// xo√° c√¥ng vi·ªác
export const deleteWork = async (id, idUser) => {
    try {
        // ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!id) {
            return Utils.error('Missing id', 400);
        }

        // c·∫≠p nh·∫≠t csdl
        const dataDelete = await workModel.findOneAndDelete({ id, idUser });

        // x·ª≠ l√Ω l·ªói
        if (!dataDelete) {
            return Utils.error('Not found Work', 404);
        }

        return Utils.success('Delete work success');
    } catch (error) {
        return Utils.error(error.message);
    }
};